{"lang":"Japanese","translated":"As the basis of the instruction set definition, let's look at what kind of function and how the computer instruction set controls as a whole.\nCommand control content\nWhen considering the control content of an instruction, completeness is required in the following two senses.\nOne is the integrity of the software from the standpoint of use.\nSpecifically, it means that any processing function required by the user can be realized by combining the instructions in the instruction set if it can be expressed as an algorithm.\nThis is essentially the same as the computability of a Turing machine, which is the theoretical prototype of a computer, but it is beyond the scope of this book and will not be discussed further here.\nThe second is integrity in hardware.\nSpecifically, all the functions of computer hardware can be controlled in some way.\nNo matter how good the functionality is implemented in hardware, it cannot be used unless it is reflected in the instruction set.\nInstructions are usually divided into the following five types according to the object of their control (see Fig. 1-3 and Fig. 1.4).\n(1) Data transfer Controls the exchange of data between registers inside the CPU and storage devices such as main memory and stack.\nSpecifically, there are (a) a load instruction from main memory to a register or vice versa, a (b) a push instruction for a stack, and a pop instruction.\n(2) Arithmetic Controls the arithmetic in the logical arithmetic unit.\nSpecifically, (a) as arithmetic operation instructions, four-rule operation on numerical data, arithmetic shift, comparison operation, and (b) as logical operation instruction, logical operation on non-numerical data, logical shift, bit field operation, data There are conversions (eg from binary format to decimal format).\nFlags such as carry, overflow, negative, and zero are changed as a result of arithmetic operations, and flags such as zero flags are changed as a result of logical operations.\nAs a special instruction, there is a no operation (nop) instruction that passes control to the next instruction without doing anything.","source":"命令セット定義の基本として,コンピュータの命令セットは、全体としてどのような機能を,どのようなかたちで制御するのかについて見てみよう.\n命令の制御内容\n命令の制御内容を考える際には,次の2つの意味での完全性が求められる.\n1つは,ソフトウェアにおいて,使用する立場からの完全性である.\n具体的には,ユーザが必要とする任意の処理機能は,それがアルゴリズムとして表現できるものであれば、命令セット中の命令を組み合わせて実現できることを意味する.\nこれはコンピュータの理論的な原型であるチューリングマシンにおける計算可能性(computability)と本質的に同じことであるが,本書の範囲を越えるのでここではこれ以上触れない.\n2つめは、ハードウェアにおける完全性である.\n具体的には,コンピュータハードウェアのもつすべての機能を,なんらかのかたちで制御できることである.\nどんなに優れた機能がハードウェアで実現されていても,これが命令セットに反映されていなければ,使用することができない.\n命令は,通常その制御の対象によって,次の5種類に分けられる(図1-3,図1.4参照).\n(1)データ転送CPU内部のレジスタや,主記憶,スタックなどの記憶装置間のデータのやりとりを制御する.\n具体的には,(a)主記憶からレジスタへのロード(load)命令あるいはその逆のストア(store)命令,(b)スタックのプッシュ(push)命令,ポップ(pop)命令などがある.\n(2)演算算術論理演算装置における演算を制御する.\n具体的には,(a)算術演算命令として,数値データに対する四則演算,算術シフト,比較演算,(b)論理演算命令として,非数値データに対する論理演算,論理シフト,ビット・フィールド操作,データの変換(例えば2進形式から10進形式へ)などがある.\n算術演算の結果,キャリ,オーバフロー,負,ゼロなどのフラグが変更され,また論理演算の結果,ゼロフラグなどが変更される.\n特殊な命令として、何もしないで次の命令に制御を渡す無操作(nooperation,nop)命令がある."}
